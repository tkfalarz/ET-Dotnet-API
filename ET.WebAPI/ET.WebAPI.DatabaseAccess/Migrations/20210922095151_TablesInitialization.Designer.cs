// <auto-generated />
using System;
using ET.WebAPI.DatabaseAccess.DatabaseSetup;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ET.WebAPI.DatabaseAccess.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20210922095151_TablesInitialization")]
    partial class TablesInitialization
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ET.WebAPI.DatabaseAccess.Entities.AqiReading", b =>
                {
                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeviceId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Timestamp", "Value", "DeviceId")
                        .IsClustered();

                    b.HasIndex("DeviceId");

                    b.HasIndex("DeviceId1");

                    b.ToTable("AqiReadings");
                });

            modelBuilder.Entity("ET.WebAPI.DatabaseAccess.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SensorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("ET.WebAPI.DatabaseAccess.Entities.HumidityReading", b =>
                {
                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeviceId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Timestamp", "Value", "DeviceId")
                        .IsClustered();

                    b.HasIndex("DeviceId");

                    b.HasIndex("DeviceId1");

                    b.ToTable("HumidityReadings");
                });

            modelBuilder.Entity("ET.WebAPI.DatabaseAccess.Entities.PressureReading", b =>
                {
                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeviceId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Timestamp", "Value", "DeviceId")
                        .IsClustered();

                    b.HasIndex("DeviceId");

                    b.HasIndex("DeviceId1");

                    b.ToTable("PressureReadings");
                });

            modelBuilder.Entity("ET.WebAPI.DatabaseAccess.Entities.TemperatureReading", b =>
                {
                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeviceId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Timestamp", "Value", "DeviceId")
                        .IsClustered();

                    b.HasIndex("DeviceId");

                    b.HasIndex("DeviceId1");

                    b.ToTable("TemperatureReadings");
                });

            modelBuilder.Entity("ET.WebAPI.DatabaseAccess.Entities.AqiReading", b =>
                {
                    b.HasOne("ET.WebAPI.DatabaseAccess.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ET.WebAPI.DatabaseAccess.Entities.Device", null)
                        .WithMany("AqiReadings")
                        .HasForeignKey("DeviceId1");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("ET.WebAPI.DatabaseAccess.Entities.HumidityReading", b =>
                {
                    b.HasOne("ET.WebAPI.DatabaseAccess.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ET.WebAPI.DatabaseAccess.Entities.Device", null)
                        .WithMany("HumidityReadings")
                        .HasForeignKey("DeviceId1");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("ET.WebAPI.DatabaseAccess.Entities.PressureReading", b =>
                {
                    b.HasOne("ET.WebAPI.DatabaseAccess.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ET.WebAPI.DatabaseAccess.Entities.Device", null)
                        .WithMany("PressureReadings")
                        .HasForeignKey("DeviceId1");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("ET.WebAPI.DatabaseAccess.Entities.TemperatureReading", b =>
                {
                    b.HasOne("ET.WebAPI.DatabaseAccess.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ET.WebAPI.DatabaseAccess.Entities.Device", null)
                        .WithMany("TemperatureReadings")
                        .HasForeignKey("DeviceId1");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("ET.WebAPI.DatabaseAccess.Entities.Device", b =>
                {
                    b.Navigation("AqiReadings");

                    b.Navigation("HumidityReadings");

                    b.Navigation("PressureReadings");

                    b.Navigation("TemperatureReadings");
                });
#pragma warning restore 612, 618
        }
    }
}
